# docker-compose.yml

services:
  cache_service:
    image: redis:8.0.2-alpine
    container_name: cache_service
  public_service:
    build: ./public_service
    container_name: public_service
  auth_service:
    build: ./auth_service
    container_name: auth_service
    volumes:
      - ./auth_service/private_key.pem:/app/private_key.pem:ro
    depends_on:
      - cache_service
  protected_service:
    build: ./protected_service
    container_name: protected_service
  debug_service:
    image: python:latest
    container_name: debug_service
    command: >
      python -c "import json, sys;
      from http.server import BaseHTTPRequestHandler, HTTPServer;

      class Handler(BaseHTTPRequestHandler):
        def do_GET(self): self.respond();
        def do_POST(self): self.respond();
        def respond(self):
          length = int(self.headers.get('Content-Length', 0));
          body = self.rfile.read(length).decode() if length else '';
          headers = dict(self.headers);
          log_entry = {
            'method': self.command,
            'path': self.path,
            'headers': headers,
            'body': body
          };
          # Log to Docker logs
          print('[REQUEST]', json.dumps(log_entry), flush=True);

          # Handle /
          if self.path == '/':
            response = log_entry
          else:
            self.send_response(404);
            self.send_header('Content-Type', 'application/json');
            self.end_headers();
            self.wfile.write(b'{\"error\": \"Not Found\"}');
            return;

          self.send_response(200);
          self.send_header('Content-Type', 'application/json');
          self.end_headers();
          self.wfile.write(json.dumps(response, indent=2).encode());

      HTTPServer(('0.0.0.0', 3000), Handler).serve_forever()
      "

  api_gateway:
    build: 
      context: ./api_gateway
      dockerfile: Dockerfile
    image: api_gateway:latest
    container_name: api_gateway
    ports:
      - "8080:8080"
    volumes:
      - ./api_gateway/public_key.pem:/etc/openresty/public_key.pem:ro
      - ./api_gateway/nginx.d:/etc/nginx/conf.d:ro
      - ./api_gateway/lua:/etc/nginx/lua:ro
    depends_on:
      - cache_service
      - auth_service
      - public_service
      - protected_service
      - debug_service
  # backend-public:
  #   build: ./backend-public
  