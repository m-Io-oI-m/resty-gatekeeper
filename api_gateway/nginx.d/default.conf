#
# /etc/nginx/nginx.d/default.conf
# Main configuration file for the OpenResty API Gateway.
#

# Defines the search path for Lua modules. The ';;' appends the default path.
lua_package_path "/etc/nginx/lua/?.lua;;";

# Defines shared memory zones for inter-worker data sharing.
lua_shared_dict my_keys 1m;             # Caches the JWT public key to avoid disk I/O.
lua_shared_dict service_auth_config 1m; # Stores the authentication requirement for each service.
lua_shared_dict upstreams 1m;           # Stores the names of discovered upstream services.

# Upstream service definitions for load balancing.
upstream public_service {
    server public_service:3000;
}
upstream protected_service {
    server protected_service:3000;
}
upstream auth_service {
    server auth_service:3000;
}
upstream debug_service {
    server debug_service:3000;
}

# Defines the main log format, including request time.
log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" rt=$request_time';

# Configures OpenResty to use Docker's internal DNS resolver for service discovery.
resolver 127.0.0.11 valid=30s;

# Defines rate limiting zones to prevent abuse.
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=10r/m;  # For login attempts.
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m; # General API limit.

# Initialization block executed once when Nginx starts.
init_by_lua_block {
    -- 1. Load the JWT public key into shared memory for efficient access.
    local f = io.open("/etc/openresty/public_key.pem", "r")
    if not f then
        error("couldn't open public key")
    end
    local pem = f:read("*a")
    f:close()
    ngx.shared.my_keys:set("auth_pubkey", pem)

    -- 2. Define a central authentication policy for all services.
    local auth_policy = {
        ["public"] = false,    -- No authentication required.
        ["debug"] = true,      -- Authentication required.
        ["protected"] = true,  -- Authentication required.
    }

    -- 3. Discover all defined upstreams and apply the authentication policy.
    -- This allows for dynamic routing without changing the Nginx config.
    local upstream = require "ngx.upstream"
    local us = upstream.get_upstreams()
    for _, name in ipairs(us) do
        local base = name:gsub("_service$", "")
        
        if auth_policy[base] ~= nil then
            ngx.shared.upstreams:set(base, true)
            ngx.shared.service_auth_config:set(base, tostring(auth_policy[base]))
        end
    end
}


server {
    listen 8080;
    server_name _;

    # Standard security headers to protect against common vulnerabilities.
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;

    # Internal location for the login endpoint. Not accessible from outside.
    location = /internal/auth/login {
        internal;
        proxy_pass http://auth_service/login;
        proxy_set_header Host $host;
        proxy_pass_request_body on;
    }

    # Public-facing endpoint for user login.
    location = /api/auth/login {
        limit_req zone=login_limit burst=5 nodelay;
        content_by_lua_file /etc/nginx/lua/handlers/auth_login.lua;
    }

    # Public-facing endpoint for user logout.
    location = /api/auth/logout {
        limit_req zone=login_limit burst=5 nodelay;
        content_by_lua_file /etc/nginx/lua/handlers/auth_logout.lua;
    }

    # Generic location block acting as the main entry point for API services.
    location ~ ^/api/ {
        limit_req zone=api_limit burst=20 nodelay;
        content_by_lua_file /etc/nginx/lua/handlers/proxy.lua;
    }

    # Internal location for dynamically proxying requests to upstream services.
    # This location is only accessible via internal redirects from `ngx.exec()`.
    location ~ ^/internal/(?<service_name>[^/]+)(?<path_info>/.*)?$ {
        internal;
        
        # Propagate original headers to the upstream service.
        proxy_pass_request_headers on;
        proxy_set_header Host $host;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Real-IP $remote_addr;
        
        # Dynamically set the upstream based on the captured service name.
        set $upstream_name "${service_name}_service";
        proxy_pass http://$upstream_name$path_info$is_args$args;
    }
}